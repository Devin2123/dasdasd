// Banks Demo Derby //

#include <open.mp>
#include <zcmd>
#include <sscanf2>
#include <crashdetect>
#include <a_mysql>

#define MAX_MAPS 10
#define DIALOG_MAP_VOTE 1
#define DIALOG_REGISTER 1001
#define DIALOG_LOGIN 1002

// Colors
#define COLOR_WHITE 0xFFFFFFAA
#define ADMINORANGE 0xF6970CAA
#define COLOR_YELLOW 0xFFFF00AA

// MySQL configuration
#define MYSQL_HOST "localhost"
#define MYSQL_USER "root"
#define MYSQL_PASSWORD ""
#define MYSQL_DATABASE "banksderby"

new PlayerPoints[MAX_PLAYERS]; // Points system
new isGameActive;
new mapChoices[3]; // Array to store random map options
new MySQL:MySQLConnection; // MySQL connection variable for R41-4
new PlayerPasswords[MAX_PLAYERS][64];  // Store player passwords temporarily

// Forward declarations
forward main();
forward CheckStartGame();
forward StartGame();
forward GetActivePlayerCount();
forward SetPlayerToSpectator(playerid);
forward SendRandomKillMessage(killerid, victimid);
forward ShowMapVoteDialog(playerid);
forward ShowRegisterDialog(playerid);
forward ShowLoginDialog(playerid);
forward HashPassword(const password[], hashedPassword[], len);
forward UserExists(const username[], playerid);
forward RegisterUser(const username[], const hashedPassword[]);
forward CheckUserCredentials(const username[], const password[]);
forward OnQueryResult(MySQL:handle);
forward OnUserExistsResult(MySQL:handle, playerid);

// Player states
new isPlayerRegistered[MAX_PLAYERS];

// Main entry point
public main() {
    print("Banks Demolition Derby has started.");
}

public OnGameModeInit() {
    print("Attempting MySQL connection...");

    // Connect to MySQL database using MySQL R41-4 plugin
    MySQLConnection = mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE);

    if (MySQLConnection != MySQL:0) {  // Check if the connection handle is valid
        print("MySQL connection is successful.");
    } else {
        new errorCode = mysql_errno(MySQLConnection);  // Get the error code as an integer
        new errorMsg[128];
        format(errorMsg, sizeof(errorMsg), "MySQL connection failed. Error code: %d", errorCode);
        print(errorMsg);
        SendRconCommand("exit");  // Close the server if connection fails
        return 1;
    }

    return 1;  // Proceed with other initialization tasks
}

// Starting of all commands
CMD:serverowner(playerid, params[]) {
    SendClientMessage(playerid, ADMINORANGE, "Thanks for playing on Banks Demolition Derby!");
    SendClientMessage(playerid, COLOR_YELLOW, "This is a passion project");
    return 1;
}

// Start Game Logic
public CheckStartGame() {
    if (GetActivePlayerCount() >= 2 && !isGameActive) {
        StartGame();
    }
}

public StartGame() {
    isGameActive = 1;
    SendClientMessageToAll(COLOR_WHITE, "The demolition derby has begun!");
}

public GetActivePlayerCount() {
    new count = 0;
    for (new i = 0; i < MAX_PLAYERS; i++) {
        if (IsPlayerConnected(i)) count++;
    }
    return count;
}

public OnPlayerConnect(playerid) {
    SendClientMessage(playerid, ADMINORANGE, "Welcome to Banks Demolition Derby!");

    if (!isPlayerRegistered[playerid]) {
        ShowRegisterDialog(playerid);
    } else {
        ShowLoginDialog(playerid);
    }
    return 1;
}

public ShowRegisterDialog(playerid) {
    ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_INPUT,
                     "Register", 
                     "Enter your password:",  // Only ask for password
                     "Register", "Cancel");
}

public ShowLoginDialog(playerid) {
    ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_INPUT,
                     "Login", "Enter your username and password:", "Login", "Cancel");
}

public SetPlayerToSpectator(playerid) {
    TogglePlayerSpectating(playerid, true);
    SendClientMessage(playerid, COLOR_WHITE, "You are now spectating.");
}

// Scoring Mechanism
public SendRandomKillMessage(killerid, victimid) {
    new randMsg = random(3);
    new player1[MAX_PLAYER_NAME], player2[MAX_PLAYER_NAME];
    GetPlayerName(killerid, player1, sizeof(player1));
    GetPlayerName(victimid, player2, sizeof(player2));

    // Switch-case block
    new msg[128];
    switch (randMsg) {
        case 0: {
            format(msg, sizeof(msg), "%s has owned %s!", player1, player2);
            SendClientMessageToAll(COLOR_WHITE, msg);
        }
        case 1: {
            format(msg, sizeof(msg), "%s shocked and owned %s!", player1, player2);
            SendClientMessageToAll(COLOR_WHITE, msg);
        }
        case 2: {
            format(msg, sizeof(msg), "%s crushed %s!", player1, player2);
            SendClientMessageToAll(COLOR_WHITE, msg);
        }
    }
}

// Map Voting System
public ShowMapVoteDialog(playerid) {
    mapChoices[0] = random(MAX_MAPS);
    mapChoices[1] = random(MAX_MAPS);
    mapChoices[2] = random(MAX_MAPS);
    ShowPlayerDialog(playerid, DIALOG_MAP_VOTE, DIALOG_STYLE_LIST, "Vote for the next map", "Map 1\\nMap 2\\nMap 3", "Vote", "Cancel");
}

public OnPlayerRequestClass(playerid, classid) {
    SendClientMessage(playerid, ADMINORANGE, "Welcome to Banks Demolition Derby!");

    if (!isPlayerRegistered[playerid]) {
        ShowRegisterDialog(playerid);
    } else {
        ShowLoginDialog(playerid);
    }
    return 0; // Block spawn
}

// Dialog response handling with improved user registration logic
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]) {
    if (playerid < 0 || playerid >= MAX_PLAYERS) {
        SendClientMessage(playerid, -1, "Invalid player ID.");
        return 0; // Stop execution if the player ID is invalid
    }

    if (dialogid == DIALOG_REGISTER) {
        if (response) {
            new username[MAX_PLAYER_NAME];
            GetPlayerName(playerid, username, sizeof(username));  // Fetch player's connected name

            if (strlen(inputtext) < 1) {  // Check if the player entered a password
                SendClientMessage(playerid, -1, "Invalid input. Please enter a password.");
                ShowRegisterDialog(playerid);  // Show the dialog again if no password is entered
                return 1; // Return 1 to continue processing
            }

            strcopy(PlayerPasswords[playerid], sizeof(PlayerPasswords[playerid]), inputtext);  

            // Asynchronous call to check if the user exists
            UserExists(username, playerid);  // Proceed with user existence check
        } else {
            Kick(playerid);  // Kick the player if they cancel registration
        }
        return 1; // Return 1 after processing the register dialog
    } 
    else if (dialogid == DIALOG_LOGIN) {
        if (response) {
            new username[24], password[64];
            if (sscanf(inputtext, "s[24]s[64]", username, password) != 2) {
                SendClientMessage(playerid, -1, "Invalid input. Please enter both username and password.");
                return 1;
            }

            if (CheckUserCredentials(username, password)) {
                SendClientMessage(playerid, -1, "Login successful!");
                isPlayerRegistered[playerid] = 1;
            } else {
                SendClientMessage(playerid, -1, "Invalid username or password!");
                ShowLoginDialog(playerid);
            }
        } else {
            Kick(playerid);
        }
        return 1; // Return 1 after processing the login dialog
    } 
    else if (dialogid == DIALOG_MAP_VOTE) {
        if (response) {
            SendClientMessage(playerid, COLOR_WHITE, "You voted for the next map.");
        }
        return 1; // Return 1 after processing the map vote dialog
    }

    return 1; // Default return for unhandled dialogs
}

// Function to check if a user exists in the database
stock UserExists(const username[], playerid) {
    new query[256];
    format(query, sizeof(query), "SELECT COUNT(*) AS cnt FROM users WHERE username='%s'", username);
    mysql_tquery(MySQLConnection, query, "OnUserExistsResult", "i", playerid);  // Pass playerid only
    return 1;
}

// Callback when checking if the user exists
public OnUserExistsResult(MySQL:handle, playerid) {
    if (!cache_is_valid()) {
        SendClientMessage(playerid, -1, "An error has occurred.");
        return;
    }

    new row_count;
    cache_get_row_count(row_count);  // Get the row count from the cache
    if (row_count > 0) {
        new count;
        cache_get_value_int(0, "cnt", count);  // Retrieve the count from the query result
        if (count > 0) {
            // Username exists, notify the player
            SendClientMessage(playerid, -1, "Username already exists! Please try a different username.");
            ShowRegisterDialog(playerid);
        } else {
            // Username does not exist, proceed with registration
            new username[MAX_PLAYER_NAME], hashedPassword[64];
            GetPlayerName(playerid, username, sizeof(username));  // Fetch the player's name again

            // Use the stored password for the player
            HashPassword(PlayerPasswords[playerid], hashedPassword, sizeof(hashedPassword));  // Hash the password
            RegisterUser(username, hashedPassword);  // Register the user
        }
    }

    cache_delete();  // Always clear the cache
}

// Function to register a new user
stock RegisterUser(const username[], const hashedPassword[]) {
    new query[256];
    format(query, sizeof(query), "INSERT INTO users (username, password) VALUES ('%s', '%s')", username, hashedPassword);
    mysql_tquery(MySQLConnection, query, "OnQueryResult", "");
    return 1;
}

// Function to check user credentials
stock CheckUserCredentials(const username[], const password[]) {
    new hashedPassword[64];
    HashPassword(password, hashedPassword, 64);

    new query[256];
    format(query, sizeof(query), "SELECT COUNT(*) FROM users WHERE username='%s' AND password='%s'", username, hashedPassword);
    mysql_tquery(MySQLConnection, query, "OnQueryResult", "");
    return 1;
}

// Example of a hashing function
stock HashPassword(const password[], hashedPassword[], len) {
    strmid(hashedPassword, password, 0, len, len);
}

// Closing MySQL connection on exit
public OnGameModeExit() {
    if (MySQLConnection != MySQL:0) {
        mysql_close(MySQLConnection);
        print("MySQL connection closed.");
    }
}

// Query Result Callback
public OnQueryResult(MySQL:handle) {
    new rows = cache_num_rows();
    if (rows > 0) {
        // Handle rows found
    } else {
        // Handle no rows found
    }
    if (cache_is_valid()) {
        cache_delete();
    }
}
